Insertion and deletion in doubly Linkedlist

class Node {
 int data;
 Node prev;
 Node next;

 
 public Node(int data) {
     this.data = data;
     this.prev = null;
     this.next = null;
 }
}


class SinglyLinkedList {
 Node head;


 public SinglyLinkedList() {
     head = null;
 }

 
 public void insertAtBeginning(int data) {
     Node newNode = new Node(data);

     
     if (head == null) {
         head = newNode;
         return;
     }

     
     newNode.next = head;

 
     head.prev = newNode;

    
     head = newNode;
 }


 public void insertAtEnd(int data) {
     Node newNode = new Node(data);

     
     if (head == null) {
         head = newNode;
         return;
     }

    
     Node lastNode = head;
     while (lastNode.next != null) {
         lastNode = lastNode.next;
     }

    
     lastNode.next = newNode;
     newNode.prev = lastNode;
 }

 
 public void insertAtPosition(int data, int position) {
     Node newNode = new Node(data);

   
     if (position == 0) {
         insertAtBeginning(data);
         return;
     }

     Node current = head;
     int count = 0;

     
     while (current != null && count < position - 1) {
         current = current.next;
         count++;
     }

    
     if (current == null) {
         System.out.println("Position out of bounds");
         return;
     }

    
     newNode.next = current.next;
     if (current.next != null) {
         current.next.prev = newNode;
     }
     current.next = newNode;
     newNode.prev = current;
 }


 public void deleteNode(int data) {
     if (head == null) {
         System.out.println("List is empty");
         return;
     }

     Node current = head;

     
     if (current != null && current.data == data) {
         head = current.next;  
         if (head != null) {
             head.prev = null;  
         }
         current = null;
         System.out.println(data + " deleted from the list.");
         return;
     }

   
     while (current != null && current.data != data) {
         current = current.next;
     }

    
     if (current == null) {
         System.out.println("Node with data " + data + " not found.");
         return;
     }

    
     if (current.next != null) {
         current.next.prev = current.prev; 
     }
     if (current.prev != null) {
         current.prev.next = current.next;  
     }

     
     current = null;
     System.out.println(data + " deleted from the list.");
 }

 
 public void deleteFirst() {
     if (head == null) {
         System.out.println("List is empty");
         return;
     }

    
     head = head.next;

   
     if (head != null) {
         head.prev = null;
     }

     System.out.println("First node deleted.");
 }


 public void deleteLast() {
     if (head == null) {
         System.out.println("List is empty");
         return;
     }

    
     Node lastNode = head;
     while (lastNode.next != null) {
         lastNode = lastNode.next;
     }

     
     if (lastNode.prev != null) {
         lastNode.prev.next = null;
     } else {
        
         head = null;
     }

     System.out.println("Last node deleted.");
 }

 
 public void printList() {
     if (head == null) {
         System.out.println("List is empty");
         return;
     }

     Node temp = head;
     while (temp != null) {
         System.out.print(temp.data + " <-> ");
         temp = temp.next;
     }
     System.out.println("null");
 }



 public static void main(String[] args) {
     SinglyLinkedList dll = new SinglyLinkedList();

   
     dll.insertAtBeginning(10);
     dll.insertAtEnd(20);
     dll.insertAtEnd(30);
     dll.printList();

    
     dll.insertAtPosition(15, 1); 
     dll.printList();

     
     dll.deleteNode(20);
     dll.printList(); 
   
     dll.deleteFirst();
     dll.printList(); 

     
     dll.deleteLast();
     dll.printList(); 

         dll.deleteNode(100); 
 }
}
Make a copy /clone of doubly linked list

class SinglyLinkedList {
       static class Node {
        int data;
        Node next, prev;

        
        public Node(int data) {
            this.data = data;
            this.next = null;
            this.prev = null;
        }
    }

    Node head;  

    
    public void append(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = newNode;
        newNode.prev = temp;
    }

   
    public void printList(Node head) {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }

        public Node cloneList(Node head) {
        if (head == null) return null;

       
        Node temp = head;
        while (temp != null) {
            Node newNode = new Node(temp.data);
            newNode.next = temp.next;
            temp.next = newNode;
            newNode.prev = temp;
            temp = newNode.next;
        }

                temp = head;
        Node clonedHead = head.next; 
        while (temp != null) {
            Node clonedNode = temp.next;
            temp.next = clonedNode.next;
            if (temp.next != null) {
                temp.next.prev = temp;
            }
            temp = temp.next;
        }

        return clonedHead;
    }

    public static void main(String[] args) {
               SinglyLinkedList list = new SinglyLinkedList();
        list.append(1);
        list.append(2);
        list.append(3);
        list.append(4);

        System.out.println("Original List:");
        list.printList(list.head);

       
        Node clonedListHead = list.cloneList(list.head);

        System.out.println("Cloned List:");
        list.printList(clonedListHead);
    }
}


